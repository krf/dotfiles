#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# (C) 2015 Daniel Vr√°til <dvratil@kde.org>
# License: GPL
#
# Requires: Python 2 or 3 and compatible GitPython
#
 
# https://github.com/gitpython-developers/GitPython
import ConfigParser
import os
import sys

try:
    import git
except ImportError:
    print("Warning: python-git module not available, can't invoke post-checkout script")

repo = git.Repo(os.getcwd())

# Don't do anything if an identity is already configured in this
# repo's .git/config
config = repo.config_reader(config_level = 'repository')
try:
    # The value of user.email is non-empty, stop here
    if config.get_value('user', 'email'):
        sys.exit(0)
except (ConfigParser.NoSectionError, ConfigParser.NoOptionError):
    # Section or option does not exist, continue
    pass
 
try:
    origin = repo.remote('origin')
except ValueError as e:
    print("** No such remote: origin, identity not updated! **")
    sys.exit(0)

if not origin:
    print('** Failed to detect remote origin, identity not updated! **')
    sys.exit(0)
 
# This is where you adjust the code to fit your needs
if 'kde.org' in origin.url or origin.url.startswith('kde:'):
    email = 'kfunk@kde.org'
elif 'kdab.com' in origin.url or origin.url.startswith('kdab'):
    email = 'kevin.funk@kdab.com'
else:
    email = 'kfunk@kde.org'
    print('** Warning: Using fallback identity: %s **' % email)
 
# Write the option to .git/config
config = repo.config_writer()
config.set_value('user', 'email', email)
config.release()
print('** User identity for this repository set to \'%s\' **' % email)

